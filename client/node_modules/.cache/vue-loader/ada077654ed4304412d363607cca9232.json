{"remainingRequest":"C:\\todo-list-dapp-main\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\todo-list-dapp-main\\client\\src\\TaskRow.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\todo-list-dapp-main\\client\\src\\TaskRow.vue","mtime":1657952119588},{"path":"C:\\todo-list-dapp-main\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657953763433},{"path":"C:\\todo-list-dapp-main\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1657953764168},{"path":"C:\\todo-list-dapp-main\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657953763433},{"path":"C:\\todo-list-dapp-main\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1657953753264}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapGetters } from 'vuex'\nimport moment from 'moment'\n\nexport default {\n    name: 'TaskRow',\n    props: {\n        taskID: String,\n        task: Object\n    },\n    computed: {\n        ...mapGetters('drizzle', ['drizzleInstance']),\n        ...mapGetters('accounts', ['activeAccount', 'activeBalance'])\n    },\n    methods: {\n        doAction(_method) {\n            this.drizzleInstance\n                .contracts[this.contractName]\n                .methods[_method]\n                .cacheSend(this.taskID)\n        },\n        onCompleteSubmit() {\n            const method = 'setComplete';\n            this.doAction(method);\n        },\n        onClearSubmit() {\n            const method = 'clear';\n            this.doAction(method);\n        },\n        onRemoveSubmit() {\n            const method = 'remove';\n            this.doAction(method);\n        },\n        onSetPrizeSubmit() {\n            this.drizzleInstance\n                .contracts[this.contractName]\n                .methods['setPrize']\n                .cacheSend(this.taskID, {\n                    from: this.activeAccount,\n                    value: this.drizzleInstance.web3\n                        .utils.toWei(this.prizeAmount,'ether')\n                })\n        },\n        prizeValueString(_valueInWei) {\n            const web3 = this.drizzleInstance.web3;\n            const valueInWei = new web3.utils.BN(_valueInWei);\n            if (valueInWei.toString() == '0') {\n                    return '-';\n            }\n            return web3.utils.fromWei(valueInWei) + ' Ξ';\n        },\n        beautyDatetime(timestamp) {\n            if (timestamp == 0 || timestamp == '0') {\n                return \"-\";\n            }\n            const m = moment(timestamp*1000);\n            const mAbsolute = m.format('YYYY/MM/DD HH:mm:ss');\n            const mDiff = m.fromNow();\n            return `${mAbsolute} (${mDiff})`;\n        }\n    },\n    data: () => ({\n        contractName: 'Todos',\n        prizeAmount: '',\n    })\n}\n",{"version":3,"sources":["TaskRow.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TaskRow.vue","sourceRoot":"src","sourcesContent":["<template>\n    <tr>\n        <th scope=\"row\">{{ taskID }}</th>\n        <td>{{ task.description }}</td>\n        <td>{{ beautyDatetime(task.createdAt) }}</td>\n        <td>{{ beautyDatetime(task.dueDate) }}</td>\n        <td>\n            <div v-if=\"task.completed\" style=\"white-space: nowrap;\">\n                <b-form-checkbox v-model=\"task.completed\" disabled>\n                    &nbsp;Completed\n                </b-form-checkbox>\n            </div>\n            <div v-else>\n                <!-- <b-form-checkbox v-model=\"task.completed\" @change=\"onCompleteSubmit\">\n                    &nbsp;Complete\n                </b-form-checkbox> -->\n                <b-button\n                    size=\"sm\" @click.prevent=\"onCompleteSubmit\"\n                    :variant=\"task.value!='0' ? 'warning' : 'success'\"\n                >\n                    Complete\n                </b-button>\n            </div>\n        </td>\n        <td>\n            <span v-if=\"task.value != '0'\">{{ prizeValueString(task.value) }}</span>\n            <div v-else-if=\"task.dueDate != '0' && task.completed == '0'\" class=\"row\">\n                <b-form inline class=\"row\" @submit.prevent=\"onSetPrizeSubmit\">\n                    <div class=\"col-md-7 col-sm-12\">\n                        <b-input size=\"sm\" v-model=\"prizeAmount\" placeholder=\"Amount (Ξ)\" type=\"text\" />\n                    </div>\n                    <div class=\"col-md-5 col-sm-12\">\n                        <b-button size=\"sm\" variant=\"warning\" type=\"submit\">Set Prize</b-button>\n                    </div>\n                </b-form>\n            </div>\n        </td>\n        <td>\n            <b-button v-if=\"task.cleared\" size=\"sm\" variant=\"danger\" @click.prevent=\"onRemoveSubmit\">Remove</b-button>\n            <b-button v-else size=\"sm\" variant=\"primary\" @click.prevent=\"onClearSubmit\">Clear</b-button>\n        </td>\n    </tr>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport moment from 'moment'\n\nexport default {\n    name: 'TaskRow',\n    props: {\n        taskID: String,\n        task: Object\n    },\n    computed: {\n        ...mapGetters('drizzle', ['drizzleInstance']),\n        ...mapGetters('accounts', ['activeAccount', 'activeBalance'])\n    },\n    methods: {\n        doAction(_method) {\n            this.drizzleInstance\n                .contracts[this.contractName]\n                .methods[_method]\n                .cacheSend(this.taskID)\n        },\n        onCompleteSubmit() {\n            const method = 'setComplete';\n            this.doAction(method);\n        },\n        onClearSubmit() {\n            const method = 'clear';\n            this.doAction(method);\n        },\n        onRemoveSubmit() {\n            const method = 'remove';\n            this.doAction(method);\n        },\n        onSetPrizeSubmit() {\n            this.drizzleInstance\n                .contracts[this.contractName]\n                .methods['setPrize']\n                .cacheSend(this.taskID, {\n                    from: this.activeAccount,\n                    value: this.drizzleInstance.web3\n                        .utils.toWei(this.prizeAmount,'ether')\n                })\n        },\n        prizeValueString(_valueInWei) {\n            const web3 = this.drizzleInstance.web3;\n            const valueInWei = new web3.utils.BN(_valueInWei);\n            if (valueInWei.toString() == '0') {\n                    return '-';\n            }\n            return web3.utils.fromWei(valueInWei) + ' Ξ';\n        },\n        beautyDatetime(timestamp) {\n            if (timestamp == 0 || timestamp == '0') {\n                return \"-\";\n            }\n            const m = moment(timestamp*1000);\n            const mAbsolute = m.format('YYYY/MM/DD HH:mm:ss');\n            const mDiff = m.fromNow();\n            return `${mAbsolute} (${mDiff})`;\n        }\n    },\n    data: () => ({\n        contractName: 'Todos',\n        prizeAmount: '',\n    })\n}\n</script>\n"]}]}