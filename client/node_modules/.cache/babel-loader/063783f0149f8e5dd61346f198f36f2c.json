{"remainingRequest":"C:\\todo-list-dapp-main\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\todo-list-dapp-main\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\todo-list-dapp-main\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\todo-list-dapp-main\\client\\src\\Tasks.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\todo-list-dapp-main\\client\\src\\Tasks.vue","mtime":1657952119618},{"path":"C:\\todo-list-dapp-main\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657953763433},{"path":"C:\\todo-list-dapp-main\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":1657953764168},{"path":"C:\\todo-list-dapp-main\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657953763433},{"path":"C:\\todo-list-dapp-main\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1657953753264}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.define-property\";\nimport \"core-js/modules/es6.object.define-properties\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.array.filter\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\nimport _toConsumableArray from \"C:/todo-list-dapp-main/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"C:/todo-list-dapp-main/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapGetters } from 'vuex';\nimport TaskRow from \"./TaskRow\";\nvar args = {\n  contractName: 'Todos',\n  method: 'getTasks',\n  methodArgs: ''\n};\nexport default {\n  name: 'Tasks',\n  components: {\n    TaskRow: TaskRow\n  },\n  computed: _objectSpread(_objectSpread(_objectSpread({}, mapGetters('drizzle', ['drizzleInstance', 'isDrizzleInitialized'])), mapGetters('contracts', ['getContractData'])), {}, {\n    rawTasks: function rawTasks() {\n      return this.getContractData({\n        contract: args.contractName,\n        method: args.method\n      });\n    },\n    tasks: function tasks() {\n      var outputTaks = _toConsumableArray(this.rawTasks);\n\n      outputTaks.forEach(function (task, index, theArray) {\n        theArray[index] = {\n          'description': task[0],\n          'createdAt': task[1],\n          'value': task[2],\n          'dueDate': task[3],\n          'completed': task[4],\n          'cleared': task[5]\n        };\n      });\n      return outputTaks;\n    }\n  }),\n  created: function created() {\n    this.$store.dispatch('drizzle/REGISTER_CONTRACT', args);\n  }\n};",{"version":3,"sources":["Tasks.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAAA,UAAA,QAAA,MAAA;AACA,OAAA,OAAA;AAEA,IAAA,IAAA,GAAA;AACA,EAAA,YAAA,EAAA,OADA;AAEA,EAAA,MAAA,EAAA,UAFA;AAGA,EAAA,UAAA,EAAA;AAHA,CAAA;AAMA,eAAA;AACA,EAAA,IAAA,EAAA,OADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,OAAA,EAAA;AADA,GAFA;AAKA,EAAA,QAAA,gDACA,UAAA,CAAA,SAAA,EAAA,CAAA,iBAAA,EAAA,sBAAA,CAAA,CADA,GAEA,UAAA,CAAA,WAAA,EAAA,CAAA,iBAAA,CAAA,CAFA;AAGA,IAAA,QAHA,sBAGA;AACA,aAAA,KAAA,eAAA,CAAA;AACA,QAAA,QAAA,EAAA,IAAA,CAAA,YADA;AAEA,QAAA,MAAA,EAAA,IAAA,CAAA;AAFA,OAAA,CAAA;AAIA,KARA;AASA,IAAA,KATA,mBASA;AACA,UAAA,UAAA,sBAAA,KAAA,QAAA,CAAA;;AACA,MAAA,UAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA,KAAA,EAAA,QAAA,EAAA;AACA,QAAA,QAAA,CAAA,KAAA,CAAA,GAAA;AACA,yBAAA,IAAA,CAAA,CAAA,CADA;AAEA,uBAAA,IAAA,CAAA,CAAA,CAFA;AAGA,mBAAA,IAAA,CAAA,CAAA,CAHA;AAIA,qBAAA,IAAA,CAAA,CAAA,CAJA;AAKA,uBAAA,IAAA,CAAA,CAAA,CALA;AAMA,qBAAA,IAAA,CAAA,CAAA;AANA,SAAA;AAQA,OATA;AAUA,aAAA,UAAA;AACA;AAtBA,IALA;AA6BA,EAAA,OA7BA,qBA6BA;AACA,SAAA,MAAA,CAAA,QAAA,CAAA,2BAAA,EAAA,IAAA;AACA;AA/BA,CAAA","sourcesContent":["<template>\n    <div v-if=\"isDrizzleInitialized\">\n\n        <table class=\"table\">\n            <thead>\n                <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Description</th>\n                    <th scope=\"col\">Created At</th>\n                    <th scope=\"col\">Due Date</th>\n                    <th scope=\"col\">Complete</th>\n                    <th scope=\"col\">Prize</th>\n                    <th scope=\"col\">Remove</th>\n                </tr>\n            </thead>\n            <tbody>\n                <TaskRow v-for=\"(task, index) in tasks\" :key=\"index\" :taskID=\"index.toString()\" :task=\"task\" />\n            </tbody>\n        </table>\n\n    </div>\n    <div v-else>\n        <p>Loading...</p>\n    </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\nimport TaskRow from './TaskRow'\n\nconst args = {\n    contractName: 'Todos',\n    method: 'getTasks',\n    methodArgs: ''\n}\n\nexport default {\n    name: 'Tasks',\n    components: {\n        TaskRow\n    },\n    computed: {\n        ...mapGetters('drizzle', ['drizzleInstance', 'isDrizzleInitialized']),\n        ...mapGetters('contracts', ['getContractData']),\n        rawTasks() {\n            return this.getContractData({\n                contract: args.contractName,\n                method: args.method\n            });\n        },\n        tasks() {\n            let outputTaks = [...this.rawTasks];\n            outputTaks.forEach((task, index, theArray) => {\n                theArray[index] =  {\n                    'description': task[0],\n                    'createdAt': task[1],\n                    'value': task[2],\n                    'dueDate': task[3],\n                    'completed': task[4],\n                    'cleared': task[5],\n                };\n            });\n            return outputTaks;\n        }\n    },\n    created() {\n        this.$store.dispatch('drizzle/REGISTER_CONTRACT', args)\n    }\n}\n</script>\n"],"sourceRoot":"src"}]}